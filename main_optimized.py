import streamlit as st
import pandas as pd
import os
from datetime import datetime

# ==============================================================================
# ƒê·∫¢M B·∫¢O T√äN FILE LOGIC D∆Ø·ªöI ƒê√ÇY CH√çNH X√ÅC V·ªöI FILE B·∫†N ƒê√É L∆ØU
# V√Ä N√ì N·∫∞M C√ôNG TH∆Ø M·ª§C V·ªöI main_optimized.py
# ==============================================================================
from a04ecaf1_1dae_4c90_8081_086cd7c7b725 import (
    setup_paths, load_raw_data, read_configs,
    apply_filters, export_report, export_pdf_report,
    apply_comparison_filters, export_comparison_report, export_comparison_pdf_report
)
# ==============================================================================

# Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n (session state) n·∫øu ch∆∞a c√≥
if "user_email" not in st.session_state:
    st.session_state.user_email = None

# M√†n h√¨nh x√°c th·ª±c email
if st.session_state.user_email is None:
    st.set_page_config(page_title="Triac Time Report", layout="wide")
    st.title("üîê Access authentication")
    email_input = st.text_input("üìß Enter the invited email to access:")

    if email_input:
        email = email_input.strip().lower()
        # ƒê·ªçc danh s√°ch email t·ª´ invited_emails.csv
        try:
            invited_emails_df = pd.read_csv("invited_emails.csv")
            INVITED_EMAILS = invited_emails_df['email'].str.strip().str.lower().tolist()
        except FileNotFoundError:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y file 'invited_emails.csv'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            st.stop()
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file 'invited_emails.csv': {e}")
            st.stop()

        if email in INVITED_EMAILS:
            st.session_state.user_email = email
            st.success("‚úÖ Email h·ª£p l·ªá! ƒêang v√†o ·ª©ng d·ª•ng...")
            st.rerun() # Refresh app after successful login
        else:
            st.error("‚ùå Email kh√¥ng c√≥ trong danh s√°ch m·ªùi.")
    st.stop() # Stop rendering the rest of the app if not authenticated

# ==============================================================================
# Ph·∫ßn ch√≠nh c·ªßa ·ª©ng d·ª•ng sau khi x√°c th·ª±c
# ==============================================================================

st.set_page_config(
    page_title="Triac Time Report",
    page_icon="‚è∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Debug: Display current user email (can be removed in production)
# st.sidebar.write(f"Logged in as: {st.session_state.user_email}")

st.title("‚è∞ TRIAC Time Report Generator")

# --- Setup Paths and Load Data ---
path_dict = setup_paths()

try:
    df_raw = load_raw_data(path_dict)
    all_projects = sorted(df_raw['Project name'].dropna().unique().tolist())
    all_years = sorted(df_raw['Year'].dropna().unique().astype(int).tolist(), reverse=True)
    all_months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
except FileNotFoundError:
    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu '{path_dict['template_file']}'. Vui l√≤ng ƒë·∫£m b·∫£o n√≥ n·∫±m trong c√πng th∆∞ m·ª•c.")
    st.stop()
except KeyError as e:
    st.error(f"L·ªói d·ªØ li·ªáu: C·ªôt '{e}' kh√¥ng t√¨m th·∫•y trong file '{path_dict['template_file']}'. Vui l√≤ng ki·ªÉm tra t√™n c·ªôt trong sheet 'Raw Data'.")
    st.stop()
except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu th√¥: {e}")
    st.stop()

# --- Sidebar for Navigation ---
st.sidebar.title("Navigation")
report_type = st.sidebar.radio("Ch·ªçn lo·∫°i b√°o c√°o:", ["B√°o C√°o Ti√™u Chu·∫©n", "B√°o C√°o So S√°nh"])

# --- Standard Report Section ---
if report_type == "B√°o C√°o Ti√™u Chu·∫©n":
    st.header("B√°o C√°o Ti√™u Chu·∫©n")

    st.subheader("C·∫•u h√¨nh b√°o c√°o")
    col1, col2 = st.columns(2)
    with col1:
        selected_years = st.multiselect(
            "Ch·ªçn nƒÉm:",
            options=all_years,
            default=[datetime.now().year] if datetime.now().year in all_years else []
        )
    with col2:
        selected_months = st.multiselect(
            "Ch·ªçn th√°ng (ƒë·ªÉ tr·ªëng cho t·∫•t c·∫£):",
            options=all_months,
            default=[]
        )

    st.subheader("L·ªçc d·ª± √°n")
    # T·∫°o m·ªôt DataFrame gi·∫£ ƒë·ªãnh cho Project Filter ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p/ch·ªçn
    if 'project_filter_df' not in st.session_state:
        st.session_state.project_filter_df = pd.DataFrame(columns=['Project Name', 'Include'])

    # Hi·ªÉn th·ªã c√°c d·ª± √°n ƒë√£ c√≥ trong df_raw
    st.write("Ch·ªçn c√°c d·ª± √°n ƒë·ªÉ bao g·ªìm trong b√°o c√°o:")
    selected_projects_for_standard = st.multiselect(
        "Ch·ªçn d·ª± √°n:",
        options=all_projects,
        default=st.session_state.project_filter_df['Project Name'].tolist() if not st.session_state.project_filter_df.empty else all_projects
    )

    # C·∫≠p nh·∫≠t st.session_state.project_filter_df d·ª±a tr√™n l·ª±a ch·ªçn
    temp_df = pd.DataFrame({'Project Name': selected_projects_for_standard})
    if not temp_df.empty:
        temp_df['Include'] = 'yes'
    st.session_state.project_filter_df = temp_df

    st.write("---")

    # X√°c ƒë·ªãnh mode b√°o c√°o d·ª±a tr√™n l·ª±a ch·ªçn nƒÉm v√† th√°ng
    report_mode = 'year'
    if selected_months:
        report_mode = 'month'
        if len(selected_months) == 12: # N·∫øu ch·ªçn ƒë·ªß 12 th√°ng, coi nh∆∞ l√† b√°o c√°o nƒÉm
            report_mode = 'year' # ho·∫∑c c√≥ th·ªÉ g·ªçi l√† annual-by-month

    # T·∫°o config dictionary
    config = {
        'mode': report_mode,
        'year': selected_years[0] if selected_years else None, # For single year mode
        'years': selected_years, # For multi-year mode
        'months': selected_months,
        'project_filter_df': st.session_state.project_filter_df
    }

    if st.button("T·∫°o B√°o C√°o Ti√™u Chu·∫©n"):
        if not selected_years:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt nƒÉm ƒë·ªÉ t·∫°o b√°o c√°o.")
        elif st.session_state.project_filter_df.empty:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d·ª± √°n ƒë·ªÉ t·∫°o b√°o c√°o.")
        else:
            try:
                # √Åp d·ª•ng b·ªô l·ªçc
                df_filtered = apply_filters(df_raw, config)

                if df_filtered.empty:
                    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi c√°c ti√™u ch√≠ l·ªçc ƒë√£ ch·ªçn. Vui l√≤ng th·ª≠ c√°c l·ª±a ch·ªçn kh√°c.")
                else:
                    # Xu·∫•t b√°o c√°o Excel
                    export_report(df_filtered, config, path_dict)
                    st.success(f"ƒê√£ t·∫°o b√°o c√°o Excel th√†nh c√¥ng: {path_dict['output_file']}")

                    # Xu·∫•t b√°o c√°o PDF
                    export_pdf_report(df_filtered, config, path_dict)
                    st.success(f"ƒê√£ t·∫°o b√°o c√°o PDF th√†nh c√¥ng: {path_dict['pdf_report']}")

                    # Hi·ªÉn th·ªã n√∫t t·∫£i v·ªÅ
                    st.download_button(
                        label="T·∫£i xu·ªëng b√°o c√°o Excel",
                        data=open(path_dict['output_file'], "rb").read(),
                        file_name=os.path.basename(path_dict['output_file']),
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    st.download_button(
                        label="T·∫£i xu·ªëng b√°o c√°o PDF",
                        data=open(path_dict['pdf_report'], "rb").read(),
                        file_name=os.path.basename(path_dict['pdf_report']),
                        mime="application/pdf"
                    )
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o ti√™u chu·∫©n: {e}")
                # Optional: st.exception(e) # ƒë·ªÉ hi·ªÉn th·ªã traceback ƒë·∫ßy ƒë·ªß

# --- Comparison Report Section ---
elif report_type == "B√°o C√°o So S√°nh":
    st.header("B√°o C√°o So S√°nh")

    comparison_mode = st.selectbox(
        "Ch·ªçn ch·∫ø ƒë·ªô so s√°nh:",
        [
            "So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng",
            "So S√°nh D·ª± √Ån Trong M·ªôt NƒÉm",
            "So S√°nh M·ªôt D·ª± √Ån Qua C√°c Th√°ng/NƒÉm"
        ]
    )

    st.subheader("C·∫•u h√¨nh so s√°nh")
    col1, col2, col3 = st.columns(3)
    with col1:
        comp_years = st.multiselect("Ch·ªçn nƒÉm:", options=all_years, default=[datetime.now().year] if datetime.now().year in all_years else [])
    with col2:
        comp_months = st.multiselect("Ch·ªçn th√°ng:", options=all_months, default=[])
    with col3:
        comp_projects = st.multiselect("Ch·ªçn d·ª± √°n:", options=all_projects, default=[])

    comparison_config = {
        'years': comp_years,
        'months': comp_months,
        'selected_projects': comp_projects
    }

    st.write("---")

    if st.button("T·∫°o B√°o C√°o So S√°nh"):
        if not comp_years or not comp_months or not comp_projects:
             st.warning("Vui l√≤ng ch·ªçn ƒë·ªß NƒÉm, Th√°ng v√† D·ª± √°n cho b√°o c√°o so s√°nh.")
        else:
            try:
                df_comparison, message = apply_comparison_filters(df_raw, comparison_config, comparison_mode)

                if df_comparison.empty:
                    st.warning(message)
                else:
                    st.subheader("D·ªØ li·ªáu so s√°nh:")
                    st.dataframe(df_comparison)

                    # Xu·∫•t b√°o c√°o Excel so s√°nh
                    export_comparison_report(df_comparison, comparison_config, path_dict, comparison_mode)
                    st.success(f"ƒê√£ t·∫°o b√°o c√°o Excel so s√°nh th√†nh c√¥ng: {path_dict['comparison_output_file']}")

                    # Xu·∫•t b√°o c√°o PDF so s√°nh
                    export_comparison_pdf_report(df_comparison, comparison_config, path_dict, comparison_mode)
                    st.success(f"ƒê√£ t·∫°o b√°o c√°o PDF so s√°nh th√†nh c√¥ng: {path_dict['comparison_pdf_report']}")

                    # N√∫t t·∫£i v·ªÅ b√°o c√°o so s√°nh
                    st.download_button(
                        label="T·∫£i xu·ªëng b√°o c√°o Excel so s√°nh",
                        data=open(path_dict['comparison_output_file'], "rb").read(),
                        file_name=os.path.basename(path_dict['comparison_output_file']),
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    st.download_button(
                        label="T·∫£i xu·ªëng b√°o c√°o PDF so s√°nh",
                        data=open(path_dict['comparison_pdf_report'], "rb").read(),
                        file_name=os.path.basename(path_dict['comparison_pdf_report']),
                        mime="application/pdf"
                    )
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o so s√°nh: {e}")
                # Optional: st.exception(e)
