import streamlit as st
import pandas as pd
import os
from datetime import datetime

# ==============================================================================
# ƒê·∫¢M B·∫¢O T√äN FILE LOGIC D∆Ø·ªöI ƒê√ÇY CH√çNH X√ÅC V·ªöI FILE B·∫†N ƒê√É L∆ØU
# V√Ä N√ì N·∫∞M C√ôNG TH∆Ø M·ª§C V·ªöI main_optimized.py
# ==============================================================================
from a04ecaf1_1dae_4c90_8081_086cd7c7b725 import (
    setup_paths, load_raw_data, read_configs,
    apply_filters, export_report, export_pdf_report,
    apply_comparison_filters, export_comparison_report, export_comparison_pdf_report
)
# ==============================================================================

script_dir = os.path.dirname(__file__)
csv_file_path = os.path.join(script_dir, "invited_emails.csv")

# ---------------------------
# PH·∫¶N X√ÅC TH·ª∞C TRUY C·∫¨P
# ---------------------------

@st.cache_data
def load_invited_emails():
    try:
        # Th·ª≠ ƒë·ªçc file m√† KH√îNG gi·∫£ ƒë·ªãnh c√≥ header.
        # ƒêi·ªÅu n√†y s·∫Ω khi·∫øn c·ªôt ƒë·∫ßu ti√™n c√≥ t√™n m·∫∑c ƒë·ªãnh l√† 0.
        df = pd.read_csv(csv_file_path, header=None, encoding='utf-8')
        
        # L·∫•y d·ªØ li·ªáu t·ª´ c·ªôt ƒë·∫ßu ti√™n (ch·ªâ s·ªë 0), lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
        # ƒê·∫£m b·∫£o c·ªôt ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh chu·ªói tr∆∞·ªõc khi √°p d·ª•ng .str
        emails = df.iloc[:, 0].astype(str).str.strip().str.lower().tolist()
        return emails
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file invited_emails.csv t·∫°i {csv_file_path}. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
        return []
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i file invited_emails.csv: {e}")
        return []

# T·∫£i danh s√°ch email ƒë∆∞·ª£c m·ªùi m·ªôt l·∫ßn
INVITED_EMAILS = load_invited_emails()

# H√†m ghi log truy c·∫≠p (n·∫øu c·∫ßn)
def log_user_access(email):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {"Time": timestamp, "Email": email}
    if "access_log" not in st.session_state:
        st.session_state.access_log = []
    st.session_state.access_log.append(log_entry)

# Logic x√°c th·ª±c ng∆∞·ªùi d√πng
if "user_email" not in st.session_state:
    st.set_page_config(page_title="Triac Time Report", layout="wide")
    st.title("üîê Access authentication")
    email_input = st.text_input("üìß Enter the invited email to access:")

    if email_input:
        email = email_input.strip().lower()
        if email in INVITED_EMAILS:
            st.session_state.user_email = email
            log_user_access(email) # K√≠ch ho·∫°t l·∫°i h√†m log n·∫øu b·∫°n mu·ªën d√πng
            st.success("‚úÖ Valid email! Entering application...")
            st.rerun() # T·ªëi ∆∞u h√≥a vi·ªác reload
        else:
            st.error("‚ùå Email is not on the invitation list.")
    st.stop() # D·ª´ng th·ª±c thi n·∫øu ch∆∞a x√°c th·ª±c

# ---------------------------
# PH·∫¶N GIAO DI·ªÜN CH√çNH C·ª¶A ·ª®NG D·ª§NG
# ---------------------------

# C·∫•u h√¨nh trang (ch·ªâ ch·∫°y m·ªôt l·∫ßn sau khi x√°c th·ª±c)
st.set_page_config(
    page_title="Triac Time Report",
    page_icon="‚è∞",
    layout="wide",
    initial_sidebar_state="expanded" # Gi·ªØ l·∫°i expanded ƒë·ªÉ thanh sidebar m·ªü m·∫∑c ƒë·ªãnh
)

st.markdown("""
    <style>
        .report-title {font-size: 30px; color: #003366; font-weight: bold;}
        .report-subtitle {font-size: 14px; color: gray;}
        footer {visibility: hidden;}
    </style>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã logo v√† ti√™u ƒë·ªÅ
col1, col2 = st.columns([0.12, 0.88])
with col1:
    # ƒê·∫£m b·∫£o file logo t·ªìn t·∫°i trong th∆∞ m·ª•c g·ªëc
    logo_path = "triac_logo.png"
    if os.path.exists(logo_path):
        st.image(logo_path, width=110)
    else:
        st.warning(f"File logo '{logo_path}' kh√¥ng t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
with col2:
    st.markdown("<div class='report-title'>Triac Time Report Generator</div>", unsafe_allow_html=True)
    st.markdown("<div class='report-subtitle'>Reporting tool for time tracking and analysis</div>", unsafe_allow_html=True)

# Thi·∫øt l·∫≠p ƒëa ng√¥n ng·ªØ
translations = {
    "English": {
        "report_tab": "Standard Report", # Changed from "Report"
        "compare_report_tab": "Comparison Report", # New tab for comparison
        "data_preview": "Data Preview",
        "user_guide": "User Guide",

        "mode": "Select mode",
        "year": "Select year(s)",
        "month": "Select month(s)",
        "project": "Select project(s)",
        "report_button": "Generate Report",
        "no_data": "No data after filtering",
        "report_done": "Report created successfully",
        "download_excel": "Download Excel",
        "download_pdf": "Download PDF",
        "export_options": "Export Options",
        "export_excel_option": "Export as Excel (.xlsx)",
        "export_pdf_option": "Export as PDF (.pdf)",

        # Comparison specific translations
        "comparison_mode": "Select Comparison Mode",
        "comp_proj_month": "Compare Projects in a Month",
        "comp_proj_year": "Compare Projects in a Year",
        "comp_one_proj_time": "Compare One Project Over Time (Months/Years)",
        "comp_years": "Select Year(s)",
        "comp_months": "Select Month(s)",
        "comp_projects": "Select Project(s)",
        "generate_comp_report": "Generate Comparison Report",
        "comp_data_preview": "Comparison Data Preview",
        "no_comp_data": "No data for selected comparison criteria or invalid selection.",
        "download_comp_excel": "Download Comparison Excel",
        "download_comp_pdf": "Download Comparison PDF",
        "comp_report_done": "Comparison Report created successfully",
        "select_criteria": "Please select enough criteria for comparison."
    },
    "Ti·∫øng Vi·ªát": {
        "report_tab": "B√°o C√°o Ti√™u Chu·∫©n", # Changed from "Report"
        "compare_report_tab": "B√°o C√°o So S√°nh", # New tab for comparison
        "data_preview": "Xem D·ªØ Li·ªáu",
        "user_guide": "H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng",

        "mode": "Ch·ªçn ch·∫ø ƒë·ªô",
        "year": "Ch·ªçn nƒÉm",
        "month": "Ch·ªçn th√°ng",
        "project": "Ch·ªçn d·ª± √°n",
        "report_button": "T·∫°o b√°o c√°o",
        "no_data": "Kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc",
        "report_done": "ƒê√£ t·∫°o b√°o c√°o th√†nh c√¥ng",
        "download_excel": "T·∫£i Excel",
        "download_pdf": "T·∫£i PDF",
        "export_options": "T√πy ch·ªçn xu·∫•t b√°o c√°o",
        "export_excel_option": "Xu·∫•t ra Excel (.xlsx)",
        "export_pdf_option": "Xu·∫•t ra PDF (.pdf)",

        # Comparison specific translations
        "comparison_mode": "Ch·ªçn Ch·∫ø ƒê·ªô So S√°nh",
        "comp_proj_month": "So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng",
        "comp_proj_year": "So S√°nh D·ª± √Ån Trong M·ªôt NƒÉm",
        "comp_one_proj_time": "So S√°nh M·ªôt D·ª± √Ån Qua C√°c Th√°ng/NƒÉm",
        "comp_years": "Ch·ªçn NƒÉm",
        "comp_months": "Ch·ªçn Th√°ng",
        "comp_projects": "Ch·ªçn D·ª± √Ån",
        "generate_comp_report": "T·∫°o B√°o C√°o So S√°nh",
        "comp_data_preview": "Xem D·ªØ Li·ªáu So S√°nh",
        "no_comp_data": "Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi ti√™u ch√≠ so s√°nh ho·∫∑c l·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.",
        "download_comp_excel": "T·∫£i Excel So S√°nh",
        "download_comp_pdf": "T·∫£i PDF So S√°nh",
        "comp_report_done": "ƒê√£ t·∫°o b√°o c√°o so s√°nh th√†nh c√¥ng",
        "select_criteria": "Vui l√≤ng ch·ªçn ƒë·ªß ti√™u ch√≠ ƒë·ªÉ so s√°nh."
    }
}

lang = st.sidebar.selectbox("Language / Ng√¥n ng·ªØ", ["English", "Ti·∫øng Vi·ªát"])
T = translations[lang]

# G·ªçi h√†m setup_paths t·ª´ file logic b√°o c√°o
path_dict = setup_paths()

@st.cache_data(ttl=1800)
def cached_load_data():
    return load_raw_data(path_dict)

@st.cache_data(ttl=1800)
def cached_read_configs():
    return read_configs(path_dict)

with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
    df_raw = cached_load_data()
    # Read configs for default values, but allow user override
    default_config_data = cached_read_configs()

# Populate default options for selects
all_years = sorted(df_raw['Year'].dropna().unique().astype(int).tolist(), reverse=True)
all_months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
all_projects = sorted(df_raw['Project name'].dropna().unique().tolist())

# T·∫°o c√°c tab
tab1, tab_comparison, tab2, tab3 = st.tabs([
    T["report_tab"],
    T["compare_report_tab"],
    T["data_preview"],
    T["user_guide"]
])

with tab1: # B√°o c√°o ti√™u chu·∫©n
    st.header(T["report_tab"])
    col1, col2, col3 = st.columns(3)
    with col1:
        # S·ª≠ d·ª•ng default value t·ª´ config_data n·∫øu c√≥, ho·∫∑c current year
        default_years = [default_config_data['year']] if default_config_data['year'] in all_years else []
        selected_years_standard = st.multiselect(
            T["year"],
            options=all_years,
            default=default_years
        )
    with col2:
        selected_months_standard = st.multiselect(
            T["month"],
            options=all_months,
            default=default_config_data['months']
        )
    with col3:
        # T·∫°o project_filter_df t·∫°m th·ªùi t·ª´ l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng trong UI
        default_included_projects = default_config_data['project_filter_df'][
            default_config_data['project_filter_df']['Include'].str.lower() == 'yes'
        ]['Project Name'].tolist()
        
        selected_projects_standard = st.multiselect(
            T["project"],
            options=all_projects,
            default=default_included_projects
        )

    st.markdown("---") # ƒê∆∞·ªùng ph√¢n c√°ch
    st.subheader(T["export_options"]) # Ti√™u ƒë·ªÅ cho t√πy ch·ªçn xu·∫•t
    export_excel_standard = st.checkbox(T["export_excel_option"], value=True, key="excel_standard_chk")
    export_pdf_standard = st.checkbox(T["export_pdf_option"], value=True, key="pdf_standard_chk") # M·∫∑c ƒë·ªãnh xu·∫•t c·∫£ PDF

    if st.button(T["report_button"], use_container_width=True, key="generate_standard_report_btn"):
        if not selected_years_standard:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt nƒÉm cho b√°o c√°o ti√™u chu·∫©n.")
        elif not selected_projects_standard:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d·ª± √°n cho b√°o c√°o ti√™u chu·∫©n.")
        elif not export_excel_standard and not export_pdf_standard:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªãnh d·∫°ng xu·∫•t b√°o c√°o (Excel ho·∫∑c PDF).")
        else:
            with st.spinner("ƒêang t·∫°o b√°o c√°o..."):
                # T·∫°o project_filter_df d·ª±a tr√™n l·ª±a ch·ªçn hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
                user_project_filter_df = pd.DataFrame({
                    'Project Name': selected_projects_standard,
                    'Include': ['yes'] * len(selected_projects_standard)
                })

                config_standard = {
                    'mode': 'year' if not selected_months_standard else 'month', # Ho·∫∑c mode kh√°c n·∫øu c·∫ßn
                    'years': selected_years_standard,
                    'months': selected_months_standard,
                    'project_filter_df': user_project_filter_df
                }
                
                # √Åp d·ª•ng b·ªô l·ªçc
                df_filtered_standard = apply_filters(df_raw, config_standard)

                if df_filtered_standard.empty:
                    st.warning(T["no_data"])
                else:
                    report_generated_standard = False
                    if export_excel_standard:
                        export_report(df_filtered_standard, config_standard, path_dict)
                        report_generated_standard = True
                    if export_pdf_standard:
                        export_pdf_report(df_filtered_standard, config_standard, path_dict)
                        report_generated_standard = True
                    
                    if report_generated_standard:
                        st.success(f"{T['report_done']}.")
                        if export_excel_standard:
                            with open(path_dict['output_file'], "rb") as f:
                                st.download_button(T["download_excel"], f, file_name=os.path.basename(path_dict['output_file']), use_container_width=True)
                        if export_pdf_standard:
                            with open(path_dict['pdf_report'], "rb") as f:
                                st.download_button(T["download_pdf"], f, file_name=os.path.basename(path_dict['pdf_report']), use_container_width=True)
                    else:
                        st.error("C√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.")


with tab_comparison: # B√°o c√°o so s√°nh
    st.header(T["compare_report_tab"])

    comparison_mode = st.selectbox(
        T["comparison_mode"],
        [
            T["comp_proj_month"],
            T["comp_proj_year"],
            T["comp_one_proj_time"]
        ],
        key="comp_mode_select"
    )

    col1_comp, col2_comp, col3_comp = st.columns(3)
    with col1_comp:
        comp_years = st.multiselect(T["comp_years"], options=all_years, default=[datetime.now().year] if datetime.now().year in all_years else [], key="comp_years_select")
    with col2_comp:
        comp_months = st.multiselect(T["comp_months"], options=all_months, default=[], key="comp_months_select")
    with col3_comp:
        comp_projects = st.multiselect(T["comp_projects"], options=all_projects, default=[], key="comp_projects_select")

    comparison_config = {
        'years': comp_years,
        'months': comp_months,
        'selected_projects': comp_projects
    }

    st.markdown("---")
    st.subheader(T["export_options"])
    export_excel_comp = st.checkbox(T["export_excel_option"], value=True, key="excel_comp_chk")
    export_pdf_comp = st.checkbox(T["export_pdf_option"], value=True, key="pdf_comp_chk")

    if st.button(T["generate_comp_report"], use_container_width=True, key="generate_comparison_report_btn"):
        if not comp_years or not comp_months or not comp_projects:
            st.warning(T["select_criteria"])
        elif not export_excel_comp and not export_pdf_comp:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªãnh d·∫°ng xu·∫•t b√°o c√°o so s√°nh (Excel ho·∫∑c PDF).")
        else:
            with st.spinner("ƒêang t·∫°o b√°o c√°o so s√°nh..."):
                df_comparison, message = apply_comparison_filters(df_raw, comparison_config, comparison_mode)

                if df_comparison.empty:
                    st.warning(message)
                else:
                    st.subheader(T["comp_data_preview"])
                    st.dataframe(df_comparison)

                    report_generated_comp = False
                    if export_excel_comp:
                        export_comparison_report(df_comparison, comparison_config, path_dict, comparison_mode)
                        report_generated_comp = True
                    if export_pdf_comp:
                        export_comparison_pdf_report(df_comparison, comparison_config, path_dict, comparison_mode)
                        report_generated_comp = True

                    if report_generated_comp:
                        st.success(f"{T['comp_report_done']}.")
                        if export_excel_comp:
                            with open(path_dict['comparison_output_file'], "rb") as f:
                                st.download_button(T["download_comp_excel"], f, file_name=os.path.basename(path_dict['comparison_output_file']), use_container_width=True)
                        if export_pdf_comp:
                            with open(path_dict['comparison_pdf_report'], "rb") as f:
                                st.download_button(T["download_comp_pdf"], f, file_name=os.path.basename(path_dict['comparison_pdf_report']), use_container_width=True)
                    else:
                        st.error("C√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o so s√°nh. Vui l√≤ng th·ª≠ l·∫°i.")


with tab2: # Xem d·ªØ li·ªáu
    st.subheader(T["data_preview"])
    st.dataframe(df_raw.head(100), use_container_width=True)

with tab3: # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.markdown(f"### {T['user_guide']}")
    if lang == "English":
        st.markdown("""
        #### Standard Report:
        - Select desired "Mode" (Year, Month, or Week).
        - Choose specific "Year(s)", "Month(s)", and "Project(s)" to filter the data.
        - Select desired export formats (Excel, PDF, or both).
        - Click "Generate Report" and then download the generated files.

        #### Comparison Report:
        - Select a "Comparison Mode":
            - **Compare Projects in a Month:** Requires one year, one month, and multiple projects.
            - **Compare Projects in a Year:** Requires one year and multiple projects.
            - **Compare One Project Over Time (Months/Years):** Requires one project and multiple months/years.
        - Select desired Years, Months, and Projects based on the chosen comparison mode.
        - Select desired export formats (Excel, PDF, or both).
        - Click "Generate Comparison Report" and then download the generated files.
        """)
    else: # Ti·∫øng Vi·ªát
        st.markdown("""
        #### B√°o C√°o Ti√™u Chu·∫©n:
        - Ch·ªçn "Ch·∫ø ƒë·ªô" (NƒÉm, Th√°ng, ho·∫∑c Tu·∫ßn) mong mu·ªën.
        - Ch·ªçn "NƒÉm", "Th√°ng", v√† "D·ª± √°n" c·ª• th·ªÉ ƒë·ªÉ l·ªçc d·ªØ li·ªáu.
        - Ch·ªçn ƒë·ªãnh d·∫°ng xu·∫•t b√°o c√°o (Excel, PDF ho·∫∑c c·∫£ hai).
        - Nh·∫•p v√†o "T·∫°o b√°o c√°o" v√† sau ƒë√≥ t·∫£i c√°c file ƒë√£ t·∫°o.

        #### B√°o C√°o So S√°nh:
        - Ch·ªçn "Ch·∫ø ƒê·ªô So S√°nh":
            - **So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng:** Y√™u c·∫ßu m·ªôt nƒÉm, m·ªôt th√°ng v√† nhi·ªÅu d·ª± √°n.
            - **So S√°nh D·ª± √Ån Trong M·ªôt NƒÉm:** Y√™u c·∫ßu m·ªôt nƒÉm v√† nhi·ªÅu d·ª± √°n (th√°ng l√† t·∫•t c·∫£ c√°c th√°ng ƒë∆∞·ª£c ch·ªçn).
            - **So S√°nh M·ªôt D·ª± √Ån Qua C√°c Th√°ng/NƒÉm:** Y√™u c·∫ßu m·ªôt d·ª± √°n v√† nhi·ªÅu th√°ng/nƒÉm.
        - Ch·ªçn NƒÉm, Th√°ng v√† D·ª± √°n d·ª±a tr√™n ch·∫ø ƒë·ªô so s√°nh ƒë√£ ch·ªçn.
        - Ch·ªçn ƒë·ªãnh d·∫°ng xu·∫•t b√°o c√°o (Excel, PDF ho·∫∑c c·∫£ hai).
        - Nh·∫•p v√†o "T·∫°o B√°o C√°o So S√°nh" v√† sau ƒë√≥ t·∫£i c√°c file ƒë√£ t·∫°o.
        """)
